//Просты типы данных (примитивные)
10, 20, Infinity, -Infinity, NaN   //числа
'hellow', "hellow"                 //строки
true, false                        //булевы
null                               //пустое значение
undefined                          //неопределенное значение


//Операторы
=                  //присвоение
==                 //равенство – сравнивает аргументы, допуская преобразование типов
===                //идентичность – определяет два аргумента на идентичность, руководствуясь строгим определением совпадения (не допускает преобразование типов)

**                 //возведение в степень
++                 //инкремент
--                 //декримент

&&                 //и
||                 //или
!                  //не


//Преобразование типов данных
1,2,3 Infinity -Infinity 'string'  =>  true
0, -0 null NaN undefined           =>  false

x = +x             // к числу
x = x + ''         // к строке
x = !!x            // к булеву типу

let a = 10;        //Преобразование чисел в логический тип данных
alert(!a)          //false
alert(!!a)         //true




//Методы работы со строковым типом данных 
new String         //функция как конструктор – возвращает, строчный объект содержащий строку в первом аргументе
String()           //функция преобразование – преобразует значение аргумента в строковый тип и вернет его

charAt()           //возвращает символ строки по его индексу, который передается в аргументе
charCodeAt()       //возвращает код Unicode символа
concat('')         //добавление к строке, через аргумент
indexOf()          //возвращает индекс подстроки (буквы) в интересующей строке (слове)
lastIndexOf()      //с конца строки
localeCompare()    //сравнение двух строк, возвращает числовой результат сравнения
slice(a,b)         //извлекает подстроку из строки, в аргументы передается интервал
split(' ',3)       //разбивает строку на массив строк, в аргументе передается символ разделения, второй – лимит (длинна массива)
substr()           //извлечение фрагмента из строки, 1 аргумент – начальная позиция, 2 – кол-во символов из возвращаемого массива
substring()        //то же самое, но не работает с отрицательными значениями и можно передавать в аргументы обратные значения
toLocaleLowerCase()//преобразует все символы в нижний регистр

match()            //находит соответствия регулярному выражению, возвращает массив содержащий результаты поиска
replace()
search()




//Математическое преобразование над числами
Math               //объект определяющий свойства, ссылаемые на математические функции и константы

Math.abs()         //возвращает абсолютное значение числа, которое передается в качестве аргумента
Math.acos()
Math.exp(x)        //экспонента в степени x
Math.sqrt()        //вычисляет квадратный корень переданного аргумента

Math.max()         //возвращает наибольший аргумент среди списка переданных аргументов
Math.pow(x,y)      //вычисляет х в степени у
Math.random()*10   //возвращает псевдослучайное число, интервал передается через умножение 

Math.ceil()        //округляет передаваемое значение
Math.floor()       //округляет число до ближайшего целого

parseFloat('')     //выполняет синтаксический разбор переданной строки и возвращает первое число, найденное в строке
parseInt('')       //преобразует строку в целое число




//Объект Number и его методы
isNaN()            //вернет истину, если передаваемый аргумент содержит NaN

new Number()       //Функции-конструктор — возвращает вновь созданный объект для числа
Number()           //преобразует свой аргумент в элементарное числовое выражение
Number.MIN_VALUE;

Number.toString()  //преобразует в строку в указанной степени счисления
Number.toPrecision()//форматирует значащие цифры числа




//Функции-конструктор